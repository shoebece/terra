locals {
  networking_resource_group_name = join("-", ["cdpz", var.environment, "networking-rg"])
  devops_subnet_id    = "/subscriptions/1691759c-bec8-41b8-a5eb-03c57476ffdb/resourceGroups/rg-infrateam/providers/Microsoft.Network/virtualNetworks/vnet-infrateam/subnets/snet-aks-infra"
  resource_group_name = join("-", ["cdpz", var.environment, "landing-rg"])
}

data "azurerm_key_vault" "kv" {
  name                       = var.sandbox_prefix == "" ? join("-", ["cdpz", var.environment, "landing-kv"]) : join("-", ["cdpz", var.environment, var.sandbox_prefix, "landing-kv"])
  resource_group_name        = local.resource_group_name
}

resource "azurerm_user_assigned_identity" "umi" {
  name                = join("-", ["cdpz", var.environment, "landing-umi"])
  resource_group_name = local.resource_group_name
  location            = var.resource_location
}

resource "azurerm_role_assignment" "umi_to_kv" {
  scope                = data.azurerm_key_vault.kv.id
  role_definition_name = "Key Vault Crypto Service Encryption User"
  principal_id         = azurerm_user_assigned_identity.umi.principal_id
}

module "staccs" {
  source   = "../../../modules/storage"
  for_each = { for i, stacc in var.staccs: stacc.stacc => stacc }

  subscription_id       = var.subscription_id
  resource_group_name   = local.resource_group_name
  environment           = var.environment
  resource_location     = var.resource_location
  resource_tags         = merge( var.resource_tags_common, var.resource_tags_spec)

  stacc_name            = each.value.stacc
  stacc_full_name       = join("", [var.sandbox_prefix, "cdpz", var.environment, each.value.stacc, "dls"])
  stacc_umi_id          = azurerm_user_assigned_identity.umi.id
  stacc_containers      = [] #each.value.stconts
  cmk_key_vault_id      = data.azurerm_key_vault.kv.id 
  cmk_key_name          = join("-", ["cdpz", var.environment, "landing-dls-cmk"])

  public_access_enabled = var.public_access_enabled

  service_endpoint_snets = [ local.devops_subnet_id ]
  peps = each.value.pep
}